{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","db_version","db_name","connection","close","ConnectionFactory","Error","Promise","resolve","reject","indexedDB","window","openRequest","open","onupgradeneeded","_createStores","event","target","result","onsuccess","response","bind","onerror","error","connectionUpgrade","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,sB,GAAa,C;AACbC,mB,GAAU,O;AACZC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDACsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,YAAYC,OAAOD,SAAvB;AACA,gCAAIE,cAAcF,UAAUG,IAAV,CAAeX,OAAf,EAAwBD,UAAxB,CAAlB;;AAEAW,wCAAYE,eAAZ,GAA8B,iBAAS;AACnCT,kDAAkBU,aAAlB,CAAgCC,MAAMC,MAAN,CAAaC,MAA7C;AACH,6BAFD;;AAIAN,wCAAYO,SAAZ,GAAwB,oBAAY;AAChC,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaiB,SAASH,MAAT,CAAgBC,MAA7B;AACAd,4CAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAM;AACrB,8CAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AACH,6BAVD;;AAYAS,wCAAYU,OAAZ,GAAsB,oBAAY;AAC9Bb,uCAAOW,SAASH,MAAT,CAAgBM,KAAvB;AACH,6BAFD;AAGH,yBAvBM,CAAP;AAwBH;;;kDAEoBC,iB,EAAmB;AACpCxB,+BAAOyB,OAAP,CAAe,iBAAS;AACpB,gCAAID,kBAAkBE,gBAAlB,CAAmCC,QAAnC,CAA4CC,KAA5C,CAAJ,EAAwD;AACpDJ,kDAAkBK,iBAAlB,CAAoCD,KAApC;AACH;;AAEDJ,8CAAkBM,iBAAlB,CAAoCF,KAApC,EAA2C;AACvCG,+CAAe;AADwB,6BAA3C;AAGH,yBARD;AASH;;;sDAEwB;AACrB,4BAAI5B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst db_version = 2;\r\nconst db_name = 'alura'\r\nvar connection = null;\r\nvar close = null\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('Não é possivel instanciar a classe ConnectionFactory');\r\n    }\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            let indexedDB = window.indexedDB;\r\n            let openRequest = indexedDB.open(db_name, db_version);\r\n\r\n            openRequest.onupgradeneeded = event => {\r\n                ConnectionFactory._createStores(event.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = response => {\r\n                if (!connection) {\r\n                    connection = response.target.result;\r\n                    close = connection.close.bind(connection)\r\n                    connection.close = () => {\r\n                        throw new Error('Não é possivel chamar o metodo close diretamente');\r\n                    }\r\n                }\r\n\r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = response => {\r\n                reject(response.target.error);\r\n            };\r\n        });\r\n    }\r\n\r\n    static _createStores(connectionUpgrade) {\r\n        stores.forEach(store => {\r\n            if (connectionUpgrade.objectStoreNames.contains(store)) {\r\n                connectionUpgrade.deleteObjectStore(store);\r\n            }\r\n\r\n            connectionUpgrade.createObjectStore(store, {\r\n                autoIncrement: true\r\n            });\r\n        });\r\n    }\r\n\r\n    static connectionClose() {\r\n        if (connection) {\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}"]}